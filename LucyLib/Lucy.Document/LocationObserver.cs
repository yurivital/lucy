//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Lucy.Document
{
    using Lucy.Core;
    using System;
    using System.Collections.Generic;
    using System.Diagnostics.Contracts;
    using System.IO;
    using System.Linq;
    using System.Security.Cryptography;
    using System.Text;
    using System.Threading.Tasks;

    /// <summary>
    /// Manage all location of the documents to index
    /// </summary>
    public class LocationObserver
    {
        /// <summary>
        /// Create an new instance of <see cref="DocumentLocation"/>
        /// </summary>
        public LocationObserver()
        {
            this.Locations = new List<DocumentLocation>();
        }
        /// <summary>
        /// Get the Locations
        /// </summary>
        public virtual List<DocumentLocation> Locations
        {
            get;
            private set;
        }

        /// <summary>
        /// Add a new location to observe
        /// </summary>
        /// <param name="uri"></param>
        public virtual void AddLocation(string uri)
        {
            bool knowedLocation = ContainLocation(uri);
            if (!knowedLocation)
            {
                Locations.Add(new DocumentLocation
                {
                    Location = uri,
                    State = DiscoveryStates.NotExplored,
                    LastDiscovered = null
                });
            }
        }

        private bool ContainLocation(string uri)
        {
            return this.Locations.Count(p => p.Location == uri) == 1;
        }

        /// <summary>
        /// Remove a location of indexed document
        /// </summary>
        /// <param name="uri">Document</param>
        public virtual void RemoveLocation(string uri)
        {
            bool knowedLocation = this.ContainLocation(uri);
            if (!knowedLocation)
            {
                return;
            }
            DocumentLocation location = this.Locations.Single(p => p.Location == uri);
            if (location != null)
            {
                this.Locations.Remove(location);
            }
        }
    }
}

