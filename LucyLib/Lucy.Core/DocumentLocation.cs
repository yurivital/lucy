//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil
//     Les modifications apportées à ce fichier seront perdues si le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Lucy.Core
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Linq;
    using System.Runtime.CompilerServices;
    using System.Text;
    using Lucy.Core;

    /// <summary>
    /// Location of an document
    /// </summary>
    public class DocumentLocation : BaseObservable
    {
        /// <summary>
        /// Get or set the location of the document
        /// </summary>

        public virtual string Location
        {
            get;
            set;
        }

        /// <summary>
        /// Get or set the date of last perfomed indexation 
        /// </summary>
        public virtual DateTime? LastDiscovered
        {
            get;
            set;
        }

        private DiscoveryStates _state = DiscoveryStates.Undefined;

        /// <summary>
        /// Get or set the current state of the location
        /// </summary>
        public virtual DiscoveryStates State
        {
            get
            {
                return _state;
            }

            set
            {
                SetProperty(ref _state, value);
            }
        }

        /// <summary>
        /// Check if the location in parameter are already in the file system tree of the current instance
        /// </summary>
        /// <param name="location">Location to test</param>
        /// <returns>true if the location to test is in fs tree, false otherwise</returns>
        public virtual bool Contain(DocumentLocation location)
        {
            string source = location.Location.ToUpperInvariant();
            string target = this.Location.ToUpperInvariant();
            string diff = source.Replace(target, string.Empty);
            return diff.Length > 0 && diff.Length < source.Length;
        }

    }
}

